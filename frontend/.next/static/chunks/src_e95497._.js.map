{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/mrowlise/kashikuroni_tech/base_project_tamplate/frontend/src/services/backend-api/baseApi.ts"],"sourcesContent":["import axios, { AxiosError, AxiosInstance, AxiosRequestConfig } from \"axios\";\n\nexport class BaseApi {\n  protected api: AxiosInstance;\n\n  constructor() {\n    const baseURL =\n      process.env.NEXT_PUBLIC_DEVELOPMENT_HOST || \"http://localhost:8000\";\n    this.api = axios.create({\n      baseURL,\n      withCredentials: true,\n    });\n  }\n\n  /**\n   * Объединение заголовков.\n   * @param headers Дополнительные заголовки.\n   * @returns Итоговые заголовки.\n   */\n  private mergeHeaders(\n    headers?: Record<string, string>,\n  ): Record<string, string> {\n    const defaultHeaders: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    const token = localStorage.getItem(\"userToken\");\n    if (token) {\n      defaultHeaders.Authorization = `Token ${token}`;\n    }\n    // Сначала в конечный headers попадет все что находиться\n    // в defaultHeaders, потом все что в headers, причем одинаковые ключи\n    // будут перезаписаны значением из headers. Такие как Content-Type например\n    return { ...defaultHeaders, ...headers };\n  }\n\n  /**\n   * Метод для выполнения POST-запроса.\n   * @param url URL для запроса.\n   * @param data Тело запроса.\n   * @param headers Дополнительные заголовки.\n   */\n  protected async post<D, R>(\n    url: string,\n    data: D,\n    headers?: Record<string, string>,\n  ): Promise<R> {\n    const config: AxiosRequestConfig = {\n      headers: this.mergeHeaders(headers),\n    };\n    const response = await this.api.post<R>(url, data, config);\n    return response.data;\n  }\n\n  /**\n   * Метод для выполнения GET-запроса.\n   * @param url URL для запроса.\n   * @param headers Дополнительные заголовки.\n   */\n  protected async get<R>(\n    url: string,\n    headers?: Record<string, string>,\n  ): Promise<R> {\n    const config: AxiosRequestConfig = {\n      headers: this.mergeHeaders(headers),\n    };\n    const response = await this.api.get<R>(url, config);\n    return response.data;\n  }\n  protected handleError = (error: AxiosError) => {\n    const simpleError = {\n      status: error.status,\n      message: error.message,\n      data: error.response?.data,\n    };\n    return simpleError;\n  };\n}\n"],"names":[],"mappings":";;;AAOM;AAPN;;AAEO,MAAM;IACD,IAAmB;IAE7B,aAAc;QACZ,MAAM,UACJ,6DAA4C;QAC9C,IAAI,CAAC,GAAG,GAAG,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;YACtB;YACA,iBAAiB;QACnB;IACF;IAEA;;;;GAIC,GACD,AAAQ,aACN,OAAgC,EACR;QACxB,MAAM,iBAAyC;YAC7C,gBAAgB;QAClB;QAEA,MAAM,QAAQ,aAAa,OAAO,CAAC;QACnC,IAAI,OAAO;YACT,eAAe,aAAa,GAAG,CAAC,MAAM,EAAE,OAAO;QACjD;QACA,wDAAwD;QACxD,qEAAqE;QACrE,2EAA2E;QAC3E,OAAO;YAAE,GAAG,cAAc;YAAE,GAAG,OAAO;QAAC;IACzC;IAEA;;;;;GAKC,GACD,MAAgB,KACd,GAAW,EACX,IAAO,EACP,OAAgC,EACpB;QACZ,MAAM,SAA6B;YACjC,SAAS,IAAI,CAAC,YAAY,CAAC;QAC7B;QACA,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAI,KAAK,MAAM;QACnD,OAAO,SAAS,IAAI;IACtB;IAEA;;;;GAIC,GACD,MAAgB,IACd,GAAW,EACX,OAAgC,EACpB;QACZ,MAAM,SAA6B;YACjC,SAAS,IAAI,CAAC,YAAY,CAAC;QAC7B;QACA,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAI,KAAK;QAC5C,OAAO,SAAS,IAAI;IACtB;IACU,cAAc,CAAC;QACvB,MAAM,cAAc;YAClB,QAAQ,MAAM,MAAM;YACpB,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,QAAQ,EAAE;QACxB;QACA,OAAO;IACT,EAAE;AACJ"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///Users/mrowlise/kashikuroni_tech/base_project_tamplate/frontend/src/services/backend-api/authApi.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BaseApi } from \"./baseApi\";\nimport * as types from \"./authApi.types\";\n\nclass AuthApi extends BaseApi {\n  /**\n   * Функция регистрации пользователя в системе.\n   */\n  public async login(data: types.SigninData): Promise<any> {\n    try {\n      const response = await this.post(\"/api/auth/v1/login/\", data);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n  /**\n   * Проверка токена на валидность.\n   */\n  public async checkToken(): Promise<any> {\n    // try {\n    await this.get(\"/api/auth/v1/users/\");\n    // } catch (error) {\n    //   if (axios.isAxiosError(error)) {\n    //     if (error.status == 401) {\n    //       throw new Error(\"Unauthorized\");\n    //     }\n    //   } else {\n    //     throw new Error(`Не известная ошибка! ${error}`);\n    //   }\n    // }\n  }\n  /**\n   * Функция выхода из системы с удалением токена с базы\n   */\n  public async logout(): Promise<any> {\n    try {\n      const response = await this.post(\"/api/auth/token/logout/\", {});\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Функция авторизации пользователя в системе\n   */\n  public async register(data: types.SignupData): Promise<types.ApiResponse> {\n    try {\n      const response = await this.post(`api/v1/register/`, data);\n      return response;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response && error.response.data) {\n          const errorMessages = error.response.data;\n          if (errorMessages.email || errorMessages.username) {\n            throw new Error(\n              \"Указанные данные уже используются. Пожалуйста, проверьте введенные данные.\",\n            );\n          } else {\n            throw new Error(\n              \"Произошла ошибка. Пожалуйста, попробуйте ещё раз.\",\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Смена пароля.\n   */\n  public async changePassword(data: types.ChangePassword): Promise<any> {\n    try {\n      const response = await this.post(\"/api/users/set_password/\", data);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport default new AuthApi();\n"],"names":[],"mappings":";;;AACA;AADA;;;AAIA,MAAM,gBAAgB,+IAAA,CAAA,UAAO;IAC3B;;GAEC,GACD,MAAa,MAAM,IAAsB,EAAgB;QACvD,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,uBAAuB;YACxD,OAAO;QACT,EAAE,OAAO,OAAO;YACd,OAAO;QACT;IACF;IACA;;GAEC,GACD,MAAa,aAA2B;QACtC,QAAQ;QACR,MAAM,IAAI,CAAC,GAAG,CAAC;IACf,oBAAoB;IACpB,qCAAqC;IACrC,iCAAiC;IACjC,yCAAyC;IACzC,QAAQ;IACR,aAAa;IACb,wDAAwD;IACxD,MAAM;IACN,IAAI;IACN;IACA;;GAEC,GACD,MAAa,SAAuB;QAClC,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC;YAC7D,OAAO;QACT,EAAE,OAAO,OAAO;YACd,OAAO;QACT;IACF;IAEA;;GAEC,GACD,MAAa,SAAS,IAAsB,EAA8B;QACxE,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,EAAE;YACrD,OAAO;QACT,EAAE,OAAO,OAAO;YACd,IAAI,wIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;gBAC7B,IAAI,MAAM,QAAQ,IAAI,MAAM,QAAQ,CAAC,IAAI,EAAE;oBACzC,MAAM,gBAAgB,MAAM,QAAQ,CAAC,IAAI;oBACzC,IAAI,cAAc,KAAK,IAAI,cAAc,QAAQ,EAAE;wBACjD,MAAM,IAAI,MACR;oBAEJ,OAAO;wBACL,MAAM,IAAI,MACR;oBAEJ;gBACF;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAa,eAAe,IAA0B,EAAgB;QACpE,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,4BAA4B;YAC7D,OAAO;QACT,EAAE,OAAO,OAAO;YACd,OAAO;QACT;IACF;AACF;uCAEe,IAAI"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/mrowlise/kashikuroni_tech/base_project_tamplate/frontend/src/context/AuthProvider.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useRouter, usePathname } from \"next/navigation\";\nimport api from \"@/services/backend-api/authApi\";\n\ntype AuthContextType = {\n  isAuthenticated: boolean;\n  loading: boolean;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n  const pathname = usePathname();\n\n  const acceptUrl = [\"/auth/login\", \"/auth/register\"];\n\n  useEffect(() => {\n    const verifyAuth = async () => {\n      if (acceptUrl.includes(pathname)) {\n        setLoading(false);\n        return; // Не проверяем токен на страницах входа и регистрации\n      }\n      \n      try {\n        await api.checkToken();\n        setIsAuthenticated(true);\n      } catch (error) {\n        router.push(\"/auth/login/\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    verifyAuth();\n  }, [pathname]);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, loading }}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;AAHA;;;;AAUA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,YAAY;QAAC;QAAe;KAAiB;IAEnD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,MAAM;qDAAa;oBACjB,IAAI,UAAU,QAAQ,CAAC,WAAW;wBAChC,WAAW;wBACX,QAAQ,sDAAsD;oBAChE;oBAEA,IAAI;wBACF,MAAM,+IAAA,CAAA,UAAG,CAAC,UAAU;wBACpB,mBAAmB;oBACrB,EAAE,OAAO,OAAO;wBACd,OAAO,IAAI,CAAC;oBACd,SAAU;wBACR,WAAW;oBACb;gBACF;;YAEA;QACF;iCAAG;QAAC;KAAS;IAEb,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAiB;QAAQ;kBACrD,CAAC,WAAW;;;;;;AAGnB;GAjCa;;QAGI,qIAAA,CAAA,YAAS;QACP,qIAAA,CAAA,cAAW;;;KAJjB;AAmCN,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANa"}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/mrowlise/kashikuroni_tech/base_project_tamplate/frontend/src/services/backend-api/baseApi.ts"],"sourcesContent":["import axios, { AxiosError, AxiosInstance, AxiosRequestConfig } from \"axios\";\n\nexport class BaseApi {\n  public api: AxiosInstance;\n\n  constructor() {\n    const baseURL =\n      process.env.NEXT_PUBLIC_DEVELOPMENT_HOST || \"http://localhost:8000\";\n    this.api = axios.create({\n      baseURL,\n      withCredentials: true,\n    });\n  }\n\n  /**\n   * Объединение заголовков.\n   * @param headers Дополнительные заголовки.\n   * @returns Итоговые заголовки.\n   */\n  private mergeHeaders(\n    headers?: Record<string, string>,\n  ): Record<string, string> {\n    const defaultHeaders: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n    };\n\n    return { ...defaultHeaders, ...headers };\n  }\n\n  /**\n   * Метод для выполнения POST-запроса.\n   * @param url URL для запроса.\n   * @param data Тело запроса.\n   * @param headers Дополнительные заголовки.\n   */\n  protected async post<D, R>(\n    url: string,\n    data?: D,\n    headers?: Record<string, string>,\n  ): Promise<R> {\n    const config: AxiosRequestConfig = {\n      headers: this.mergeHeaders(headers),\n    };\n    const response = await this.api.post<R>(url, data, config);\n    return response.data;\n  }\n\n  /**\n   * Метод для выполнения GET-запроса.\n   * @param url URL для запроса.\n   * @param headers Дополнительные заголовки.\n   */\n  protected async get<R>(\n    url: string,\n    headers?: Record<string, string>,\n  ): Promise<R> {\n    const config: AxiosRequestConfig = {\n      headers: this.mergeHeaders(headers),\n    };\n    const response = await this.api.get<R>(url, config);\n    return response.data;\n  }\n\n  protected handleError = (error: AxiosError) => {\n    const simpleError = {\n      status: error.status,\n      message: error.message,\n      data: error.response?.data,\n    };\n    return simpleError;\n  };\n\n  /**\n   * Executes a PUT request to the specified URL with the given data.\n   *\n   * @template D The type of the request payload.\n   * @template R The expected type of the response data.\n   * @param {string} url - The URL to send the PUT request to.\n   * @param {D} [data] - The payload to be sent in the request body.\n   * @param {Record<string, string>} [headers] - Optional additional headers to include in the request.\n   * @returns {Promise<R>} A promise resolving to the response data of type R.\n   *\n   * @throws {Error} Throws an error if the request fails. The error will be formatted by `handleError`.\n   */\n  protected async put<D, R>(\n    url: string,\n    data?: D,\n    headers?: Record<string, string>,\n  ): Promise<R> {\n    const config: AxiosRequestConfig = {\n      headers: this.mergeHeaders(headers),\n    };\n    try {\n      const response = await this.api.put<R>(url, data, config);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error as AxiosError);\n    }\n  }\n  /**\n   * Executes a DELETE request to the specified URL with optional headers.\n   *\n   * @template R The expected type of the response data.\n   * @param {string} url - The URL to send the DELETE request to.\n   * @param {Record<string, string>} [headers] - Optional additional headers to include in the request.\n   * @returns {Promise<R>} A promise resolving to the response data of type R, if provided by the server.\n   *\n   * @throws {Error} Throws an error if the request fails. The error will be formatted by `handleError`.\n   */\n  protected async delete<R>(\n    url: string,\n    headers?: Record<string, string>,\n  ): Promise<R> {\n    const config: AxiosRequestConfig = {\n      headers: this.mergeHeaders(headers),\n    };\n    try {\n      const response = await this.api.delete<R>(url, config);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error as AxiosError);\n    }\n  }\n}\n"],"names":[],"mappings":";;;AAOM;AAPN;;AAEO,MAAM;IACJ,IAAmB;IAE1B,aAAc;QACZ,MAAM,UACJ,6DAA4C;QAC9C,IAAI,CAAC,GAAG,GAAG,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;YACtB;YACA,iBAAiB;QACnB;IACF;IAEA;;;;GAIC,GACD,AAAQ,aACN,OAAgC,EACR;QACxB,MAAM,iBAAyC;YAC7C,gBAAgB;QAClB;QAEA,OAAO;YAAE,GAAG,cAAc;YAAE,GAAG,OAAO;QAAC;IACzC;IAEA;;;;;GAKC,GACD,MAAgB,KACd,GAAW,EACX,IAAQ,EACR,OAAgC,EACpB;QACZ,MAAM,SAA6B;YACjC,SAAS,IAAI,CAAC,YAAY,CAAC;QAC7B;QACA,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAI,KAAK,MAAM;QACnD,OAAO,SAAS,IAAI;IACtB;IAEA;;;;GAIC,GACD,MAAgB,IACd,GAAW,EACX,OAAgC,EACpB;QACZ,MAAM,SAA6B;YACjC,SAAS,IAAI,CAAC,YAAY,CAAC;QAC7B;QACA,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAI,KAAK;QAC5C,OAAO,SAAS,IAAI;IACtB;IAEU,cAAc,CAAC;QACvB,MAAM,cAAc;YAClB,QAAQ,MAAM,MAAM;YACpB,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,QAAQ,EAAE;QACxB;QACA,OAAO;IACT,EAAE;IAEF;;;;;;;;;;;GAWC,GACD,MAAgB,IACd,GAAW,EACX,IAAQ,EACR,OAAgC,EACpB;QACZ,MAAM,SAA6B;YACjC,SAAS,IAAI,CAAC,YAAY,CAAC;QAC7B;QACA,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAI,KAAK,MAAM;YAClD,OAAO,SAAS,IAAI;QACtB,EAAE,OAAO,OAAO;YACd,MAAM,IAAI,CAAC,WAAW,CAAC;QACzB;IACF;IACA;;;;;;;;;GASC,GACD,MAAgB,OACd,GAAW,EACX,OAAgC,EACpB;QACZ,MAAM,SAA6B;YACjC,SAAS,IAAI,CAAC,YAAY,CAAC;QAC7B;QACA,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAI,KAAK;YAC/C,OAAO,SAAS,IAAI;QACtB,EAAE,OAAO,OAAO;YACd,MAAM,IAAI,CAAC,WAAW,CAAC;QACzB;IACF;AACF"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///Users/mrowlise/kashikuroni_tech/base_project_tamplate/frontend/src/services/backend-api/authApi.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BaseApi } from \"./baseApi\";\nimport * as types from \"./authApi.types\";\n\nclass AuthApi extends BaseApi {\n  /**\n   * Функция авторизации пользователя в системе\n   */\n  public async register(data: types.SignupData): Promise<types.ApiResponse> {\n    try {\n      const response = await this.post(`api/auth/v1/register/`, data);\n      return response;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        if (error.response && error.response.data) {\n          const errorMessages = error.response.data;\n          if (errorMessages.email || errorMessages.username) {\n            throw new Error(\n              \"Указанные данные уже используются. Пожалуйста, проверьте введенные данные.\",\n            );\n          } else {\n            throw new Error(\n              \"Произошла ошибка. Пожалуйста, попробуйте ещё раз.\",\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Функция регистрации пользователя в системе.\n   */\n  public async login(data: types.SigninData): Promise<any> {\n    const response = await this.post(\"/api/auth/v1/login/\", data);\n    return response;\n  }\n\n  /**\n   * Функция выхода из системы с удалением токена с базы\n   */\n  public async logout(): Promise<any> {\n    const response = await this.post(\"/api/auth/v1/logout/\");\n    return response;\n  }\n\n  public async deleteAccount(): Promise<any> {\n    const response = await this.delete(\"/api/auth/v1/users/delete/\");\n    return response;\n  }\n\n  /**\n   * Fetches user data from the backend API.\n   *\n   * @returns {Promise<any>} The user data returned from the backend.\n   *\n   * @throws Will throw an error if the API request fails.\n   *\n   * Note: This function does not handle errors internally.\n   * Ensure that you wrap the call to this function in a `try-catch` block\n   * or use a `.catch()` method to handle potential errors.\n   *\n   * Example usage:\n   * ```ts\n   * try {\n   *   const user = await userService.getUser();\n   *   console.log(user);\n   * } catch (error) {\n   *   console.error(\"Failed to fetch user data:\", error);\n   * }\n   * ```\n   */\n  public async getUser(): Promise<any> {\n    const response = await this.get(\"/api/auth/v1/users/\", {\n      \"Cache-Control\": \"no-store\",\n    });\n    return response;\n  }\n\n  /**\n   * Refreshes the access token using the refresh token stored in cookies.\n   *\n   * This function sends a POST request to the backend API endpoint\n   * to refresh the tokens. It expects the backend to manage tokens via HttpOnly cookies.\n   *\n   * @returns {Promise<void>} Resolves when the token is successfully refreshed.\n   *\n   * @throws Will throw an error if the refresh token is missing or the refresh process fails.\n   *\n   * Note: This function assumes that HttpOnly cookies are automatically handled\n   * by the browser or client during the request.\n   *\n   * Example usage:\n   * ```ts\n   * try {\n   *   await authService.refreshToken();\n   *   console.log(\"Token refreshed successfully.\");\n   * } catch (error) {\n   *   console.error(\"Failed to refresh token:\", error);\n   * }\n   * ```\n   */\n  public async refreshToken(): Promise<types.RefreshTokenProps> {\n    const response = await this.post<{}, types.RefreshTokenProps>(\n      \"/api/auth/v1/refresh/\",\n    );\n    if (!response || typeof response.success !== \"boolean\") {\n      throw new Error(\"Invalid response format.\");\n    }\n    if (!response.success) {\n      throw new Error(response.message || \"Failed to refresh token.\");\n    }\n    return response;\n  }\n\n  public async updateProfile(data: FormData): Promise<any> {\n    const response = await this.put(\"/api/auth/v1/users/\", data, {\n      \"Content-Type\": \"multipart/form-data\",\n    });\n    return response;\n  }\n\n  /**\n   * Смена пароля.\n   */\n  public async changePassword(data: types.ChangePassword): Promise<any> {\n    const response = await this.post(\"/api/users/set_password/\", data);\n    return response;\n  }\n}\n\nexport default new AuthApi();\n"],"names":[],"mappings":";;;AACA;AADA;;;AAIA,MAAM,gBAAgB,+IAAA,CAAA,UAAO;IAC3B;;GAEC,GACD,MAAa,SAAS,IAAsB,EAA8B;QACxE,IAAI;YACF,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,qBAAqB,CAAC,EAAE;YAC1D,OAAO;QACT,EAAE,OAAO,OAAO;YACd,IAAI,wIAAA,CAAA,UAAK,CAAC,YAAY,CAAC,QAAQ;gBAC7B,IAAI,MAAM,QAAQ,IAAI,MAAM,QAAQ,CAAC,IAAI,EAAE;oBACzC,MAAM,gBAAgB,MAAM,QAAQ,CAAC,IAAI;oBACzC,IAAI,cAAc,KAAK,IAAI,cAAc,QAAQ,EAAE;wBACjD,MAAM,IAAI,MACR;oBAEJ,OAAO;wBACL,MAAM,IAAI,MACR;oBAEJ;gBACF;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAa,MAAM,IAAsB,EAAgB;QACvD,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,uBAAuB;QACxD,OAAO;IACT;IAEA;;GAEC,GACD,MAAa,SAAuB;QAClC,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC;QACjC,OAAO;IACT;IAEA,MAAa,gBAA8B;QACzC,MAAM,WAAW,MAAM,IAAI,CAAC,MAAM,CAAC;QACnC,OAAO;IACT;IAEA;;;;;;;;;;;;;;;;;;;;GAoBC,GACD,MAAa,UAAwB;QACnC,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,uBAAuB;YACrD,iBAAiB;QACnB;QACA,OAAO;IACT;IAEA;;;;;;;;;;;;;;;;;;;;;;GAsBC,GACD,MAAa,eAAiD;QAC5D,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAC9B;QAEF,IAAI,CAAC,YAAY,OAAO,SAAS,OAAO,KAAK,WAAW;YACtD,MAAM,IAAI,MAAM;QAClB;QACA,IAAI,CAAC,SAAS,OAAO,EAAE;YACrB,MAAM,IAAI,MAAM,SAAS,OAAO,IAAI;QACtC;QACA,OAAO;IACT;IAEA,MAAa,cAAc,IAAc,EAAgB;QACvD,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,uBAAuB,MAAM;YAC3D,gBAAgB;QAClB;QACA,OAAO;IACT;IAEA;;GAEC,GACD,MAAa,eAAe,IAA0B,EAAgB;QACpE,MAAM,WAAW,MAAM,IAAI,CAAC,IAAI,CAAC,4BAA4B;QAC7D,OAAO;IACT;AACF;uCAEe,IAAI"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///Users/mrowlise/kashikuroni_tech/base_project_tamplate/frontend/src/context/AuthProvider.tsx"],"sourcesContent":["\"use client\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport api from \"@/services/backend-api/authApi\";\nimport { User } from \"./AuthProvider.types\";\n\ntype AuthContextType = {\n  user: User | null;\n  isAuthenticated: boolean;\n  loading: boolean;\n  refreshUser: () => Promise<void>;\n  clearAuth: () => void;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const refreshUser = async () => {\n    try {\n      const userData = await api.getUser();\n      setUser(userData);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error(\"Failed to refresh user data:\", error);\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearAuth = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  useEffect(() => {\n    refreshUser(); // Загружаем данные пользователя при монтировании провайдера\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated, loading, refreshUser, clearAuth }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"],"names":[],"mappings":";;;;;AACA;AACA;;;AAFA;;;AAaA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,cAAc;QAClB,IAAI;YACF,MAAM,WAAW,MAAM,+IAAA,CAAA,UAAG,CAAC,OAAO;YAClC,QAAQ;YACR,mBAAmB;QACrB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,QAAQ;YACR,mBAAmB;QACrB,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,YAAY;QAChB,QAAQ;QACR,mBAAmB;IACrB;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,eAAe,4DAA4D;QAC7E;iCAAG,EAAE;IAEL,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAiB;YAAS;YAAa;QAAU;kBACnF;;;;;;AAGP;GAjCa;KAAA;AAmCN,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANa"}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}